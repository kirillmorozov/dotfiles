" It is a text editor, not an IDE
" It probably has that feature built in
" Move with deliberate purpose
" The documentation is better than you imagine
" HJKL is not an important part of vim navigation
" Project drawers conflict with split windows, favor splits
" Visual clutter saps mental energy
" Use plugins sparingly
" Navigate by tags and search, not files
" If it feels hard, there is probably a better way
" You should understand every line in your vimrc
" UI "tabs" are probably not what you expect
" Don't seek mastery, seek proficiency

" Use spacebar as a leader key
let mapleader=" "

" Suppress the banner
let g:netrw_banner=0
" Open in prior window
let g:netrw_browse_split=4
" Change from left splitting to right splitting
let g:netrw_altv=1
" Tree style view in netrw
let g:netrw_liststyle=3

" Make Vim behave in a more useful way
set nocompatible

" Use a swapfile for the buffer
set noswapfile

" Automatically read file again if it was changed outside vim
set autoread

" Automatically save before :next, :make etc
set autowrite

" Set title of the window
set title

" Switch on syntax highlighting
syntax enable

filetype plugin indent on

if has('termguicolors')
	set termguicolors
	for s:cs in ['wildcharm', 'zaibatsu', 'habamax', 'default']
		try
			execute 'colorscheme ' . s:cs
			break
		catch /E185:/
			" colorscheme not found, try next
		endtry
	endfor
else
	colorscheme default
endif

" Show tabs, multiple consecutive spaces, trailing spaces and breaks
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:␣,trail:·,lead:\ ,multispace:·
let &showbreak = '↪ '

" Turn on line numbers
set number
" Turn on relative line numbers
set relativenumber
" Show the line and column number of the cursor position
set ruler

" Screen columns that are highlighted
set colorcolumn=80

" Enable case insensitive searching
set ignorecase
" All searches are case insensitive unless there's a capital letter
set smartcase
" Highlight search results
set hlsearch
" Enable incremental searching
set incsearch

" Enable text wrapping
set wrap
" Tabs=4spaces
set tabstop=4
set shiftwidth=4
" Do not expand tab
set noexpandtab

" Encoding set to UTF-8
set fileencoding = "utf-8"

" Number of items in popup menu
set pumheight=10

" Always show statusline
set laststatus=2

" Draw the signcolumn only when there is a sign to display
set signcolumn=auto

" Do smart autoindenting when starting a new line
set smartindent

" Splitting a window will put the new window below the current one
set splitbelow
" Splitting a window will put the new window right of the current one
set splitright

" If in Insert, Replace or Visual mode put a message on the last line
set showmode

" Delete comment character when joining commented lines.
set formatoptions+=j

" Minimal number of screen lines to keep above and below the cursor
set scrolloff=8
" Minimal number of screen columns to keep to the left and to the right of the
" cursor
set sidescrolloff=8

" Command-line completion operates in an enhanced mode
set wildmenu
set wildmode=noselect:lastused,full
set wildoptions=pum
" Hide noise in completion
set wildignore+=*.pyc,*/.git/*,*/node_modules/*

" Key mappings
" Search
nmap <leader>/ :grep<Space>
nnoremap N Nzz
nnoremap n nzz
" General navigation
nnoremap <Leader>b :buffer<Space>
nnoremap <C-S> :update<CR>
nnoremap <leader>f :find<Space>
nnoremap <leader>h :vert<Space>help<Space>
" Window navigation
nmap <leader>w <c-w>
nmap <C-H> <c-w>h
nmap <C-J> <c-w>j
nmap <C-K> <c-w>k
nmap <C-L> <c-w>l
" Open in a split
nmap gsf <C-w>vgf
" Moving selected lines
nmap <A-Down> :m<Space>.+1<CR>==
nmap <A-Up> :m<Space>.-2<CR>==
vmap <A-Down> :m<Space>'>+1<CR>gv=gv
vmap <A-Up> :m<Space>'<-2<CR>gv=gv
" Quickfix list navigation
nmap <leader>cc :cclose<CR>
nmap <leader>co :copen<CR>
nmap [<C-Q> :cpfile<CR>zz
nmap [Q :crewind<CR>zz
nmap [q :cprevious<CR>zz
nmap ]<C-Q> :cnfile<CR>zz
nmap ]Q :clast<CR>zz
nmap ]q :cnext<CR>zz
" Location list navigation
nmap <leader>lc :lclose<CR>
nmap <leader>lo :lopen<CR>
nmap [<C-L> :lpfile<CR>zz
nmap [L :lrewind<CR>zz
nmap [l :lprevious<CR>zz
nmap ]<C-L> :lnfile<CR>zz
nmap ]L :llast<CR>zz
nmap ]l :lnext<CR>zz
" Argument list navigation
nmap [A :rewind<CR>
nmap [a :previous<CR>
nmap ]A :last<CR>
nmap ]a :next<CR>
" Tags navigation
nmap [t :tprevious<CR>zz
nmap ]t :tnext<CR>zz
nmap [T :trewind<CR>zz
nmap ]T :tlast<CR>zz
nmap [<C-T> :ptprevious<CR>zz
nmap ]<C-T> :ptnext<CR>zz
" Buffers navigation
nmap [B :brewind<CR>
nmap [b :bprevious<CR>
nmap ]B :blast<CR>
nmap ]b :bnext<CR>
" Clipboard
map <leader>y "+y
map <leader>p "+p
map <leader><s-p> "+<s-p>
" Make
nmap <Leader>m :make<Space>
" Open file in a vertical split
cnoremap <expr> <C-v> <SID>VertSplitFind()

" Use ripgrep for search if it's installed
if executable('rg')
	set grepprg=rg
				\\ --vimgrep
				\\ --smart-case
				\\ --follow
				\\ --hidden
				\\ --glob
				\\ '!.git/**'
endif

function! s:VertSplitFind() abort
	if getcmdtype() != ':'
		return "\<C-v>"
	endif
	let l:line = getcmdline()
	if l:line =~# '^\s*\%(vert\s\+\)\?find\>'
		let l:new = substitute(l:line, '^\s*\%(vert\s\+\)\?find\>', 'vert sfind', '')
		return "\<C-U>" . l:new . "\<CR>"
	endif
	return "\<C-v>"
endfunction

" Initialise files cache.
let s:filescache = []

" Get a list of all files using built-in globpath.
function! s:GlobFiles() abort
	return globpath('.', '**', 1, 1)
			\->filter('!isdirectory(v:val)')
			\->map("fnamemodify(v:val, ':.')")
endfunction

" Get a list of all files using `fd` executable.
function! s:FdFiles() abort
	let l:find_command = 'fd
			\ --exclude .git
			\ --follow
			\ --full-path
			\ --hidden
			\ --type file'
	let l:result = systemlist(l:find_command)
	if v:shell_error
		echoerr l:result
		return []
	endif
	return l:result
endfunction

" Use GlobFiles as the default files_fetcher.
let s:files_fetcher = function('s:GlobFiles')

" Use fd to find files if it's available.
if executable('fd')
	let s:files_fetcher = function('s:FdFiles')
endif

" Obtain fuzzy-matched list of filenames for the :find command.
function! s:FindFunc(file, _) abort
	if empty(s:filescache)
		let s:filescache = s:files_fetcher()
	endif
	return a:file == '' ? s:filescache : matchfuzzy(s:filescache, a:file)
endfunction

set findfunc=s:FindFunc

" Set up Git TUI client
if executable('lazygit')
	function! Git()
		execute 'silent !lazygit'
		redraw!
	endfunction
	nmap <c-g> :call Git()<cr>
endif

function! s:FormatFile() abort
	if &formatprg==""
		return
	endif
	let l:view = winsaveview()
	keepjumps silent! normal! gggqG
	if v:shell_error
		silent undo
		echoerr printf(
					\ 'formatprg "%s" exited with status %d',
					\ &formatprg,
					\ v:shell_error
					\ )
	endif
	keepjumps call winrestview(l:view)
endfunction

augroup autoformat
	autocmd!
	autocmd BufWritePre * call <sid>FormatFile()
augroup END

augroup cmdline_autocomplete
	" Trigger cmdline autocompletion
	autocmd CmdlineChanged [:\/\?] call wildtrigger()
	" Empty files cache on cmdline entry
	autocmd CmdlineEnter :find let s:filescache = []
augroup END

" Enable built-in packages
silent! packadd comment
silent! packadd hlyank | let g:hlyank_duration = 150
silent! packadd nohlsearch
