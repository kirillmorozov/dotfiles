---
- name: Install packages
  connection: local
  hosts: localhost
  tasks:
    - name: macOS packages installed
      when: ansible_distribution == "MacOSX"
      community.general.homebrew:
        package:
          - fd
          - fzf
          - go-task
          - helix
          - jq
          - lazygit
          - neovim
          - ripgrep
          - starship
          - yq
        state: latest
    - name: Add GitHub CLI repository
      become: true
      when: ansible_distribution == "Linux Mint"
      block:
        - name: Get keyring
          ansible.builtin.get_url:
            dest: /etc/apt/keyrings/githubcli-archive-keyring.gpg
            url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
        - name: Add repository
          ansible.builtin.apt_repository:
            repo: >-
              deb [arch={{ ansible_architecture }}
              signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg]
              https://cli.github.com/packages stable main
            state: present
    - name: Linux Mint packages installed
      become: true
      when: ansible_distribution == "Linux Mint"
      ansible.builtin.apt:
        package:
          - fd-find
          - fzf
          - gh
          - git
          - jq
          - neovim
          - ripgrep
          - task
          - vim
          - yq
          - zsh
        state: latest
    - name: Add GitHub CLI repository
      become: true
      when: ansible_distribution == "Fedora"
      ansible.builtin.yum_repository:
        baseurl: https://cli.github.com/packages/rpm/gh-cli.repo
        description: GitHub CLI
        name: gh-cli
        state: present
    - name: Fedora packages installed
      become: true
      when: ansible_distribution == "Fedora"
      ansible.builtin.dnf:
        state: latest
        pkg:
          - fd-find
          - fzf
          - gh
          - git
          - go-task
          - jq
          - neovim
          - ripgrep
          - vim
          - yq
          - zsh
    - name: Install Starship
      when: ansible_system == "Linux"
      vars:
        bin_dir: ~/.local/bin
      block:
        - name: Find Starship executable
          ansible.builtin.stat:
            path: "{{ bin_dir }}/starship"
            register: starship_executable
        - name: Download install script
          when: not starship_executable.stat.exists
          ansible.builtin.get_url:
            dest: /tmp/install-starship.sh
            url: https://starship.rs/install.sh
        - name: Run Starship installation script
          ansible.builtin.script:
            cmd: /tmp/install-starship.sh --bin-dir {{ bin_dir }}
            creates: "{{ bin_dir }}/starship"
    - name: Install Oh My Zsh
      command:
        cmd: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        creates: ~/.oh-my-zsh

- name: Change shell
  connection: local
  hosts: localhost
  tasks:
    - name: Set Zsh as user shell
      become: true
      when: ansible_distribution != "MacOSX"
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: /usr/bin/zsh

- name: Install completions
  connection: local
  hosts: localhost
  vars:
    completions_path: ~/.oh-my-zsh/custom/completions
  tasks:
    - name: Link brew completions
      when: ansible_distribution == "MacOSX"
      command: brew completions link
    - name: Install fd completions
      command:
        cmd: fd --gen-completions=zsh > {{ completions_path }}/_fd
        creates: "{{ completions_path }}/_fd"
    - name: Install ripgrep completions
      command:
        cmd: rg --generate=complete-zsh > {{ completions_path }}/_rg
        creates: "{{ completions_path }}/_rg"
    - name: Install task completions
      command:
        cmd: task --completion zsh 2> {{ completions_path }}/_task
        creates: "{{ completions_path }}/_task"

- name: Create symlinks
  connection: local
  hosts: localhost
  vars:
    xdg_config_dir: ~/.config
  roles:
    - role: stow
      vars:
        target_path: "~"
        src_dir: "{{playbook_dir}}/vim"
    - role: stow
      vars:
        target_path: "~"
        src_dir: "{{playbook_dir}}/zsh"
    - role: stow
      vars:
        target_path: "~"
        src_dir: "{{playbook_dir}}/task"
    - role: stow
      vars:
        target_path: "~"
        src_dir: "{{playbook_dir}}/wezterm"
    - role: stow
      vars:
        target_path: "{{ xdg_config_dir }}/nvim"
        src_dir: "{{playbook_dir}}/neovim"
    - role: stow
      vars:
        target_path: "{{ xdg_config_dir }}/alacritty"
        src_dir: "{{playbook_dir}}/alacritty"
    - role: stow
      vars:
        target_path: "{{ xdg_config_dir }}/helix"
        src_dir: "{{playbook_dir}}/helix"
